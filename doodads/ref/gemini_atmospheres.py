import re
from struct import unpack
import numpy as np
from astropy.io import fits
import astropy.units as u
import os.path
from ..modeling.units import WAVELENGTH_UNITS
from .helpers import filter_from_fits
from . import model_grids
from .. import utils

__all__ = [
    'GEMINI_ATMOSPHERES',
    'GEMINI_NORTH_ATMOSPHERES',
    'GEMINI_SOUTH_ATMOSPHERES',
]


def _convert_gemini_atmosphere(download_filepath, output_filepath):
    wavelengths_um, transmission = np.genfromtxt(download_filepath, unpack=True)
    wl = (wavelengths_um * u.um).to(WAVELENGTH_UNITS).value
    columns = [
        fits.Column(name='wavelength', format='E', array=wl),
        fits.Column(name='transmission', format='E', array=transmission),
    ]
    hdu = fits.BinTableHDU.from_columns(columns)
    hdu.writeto(output_filepath, overwrite=True)

# The raw data files generated by ATRAN for 0.9-5.6 microns are available via
# the following table. Any use of these data should reference Lord, S. D.,
# 1992, NASA Technical Memorandum 103957, and acknowledge Gemini Observatory.
# The models are in ASCII two-column format: (a) wavelength with a sampling of
# 0.00002µm and a resolution of 0.00004µm (0.04nm) and (b) transmission.
# The numbers in the titles of the files are 10X the water vapor in mm and 10X the airmass.

_base_url = "http://www.gemini.edu/sciops/ObsProcess/obsConstraints/atm-models/"
_filename_template = "{site}trans_zm_{pwv}_{airmass}.dat"
GEMINI_ATMOSPHERES = {
    'Mauna Kea': {},
    'Cerro Pachon': {}
}
_PARAM_RE = re.compile(r".+trans_zm_(\d+)_(\d+)\..+")


def _convert_collection_to_model_grid(input_filepaths: list[str], output_filepath: str):
    wavelengths_wl_units = None
    spectra = None
    params = None
    for idx, fp in enumerate(sorted(input_filepaths)):
        name = os.path.basename(fp)
        match = _PARAM_RE.match(name)
        if match is None:
            raise RuntimeError(f"Unmatchable filename {name}")
        pwv_mm, airmass = match.groups()
        pwv_mm = float(pwv_mm) / 10
        airmass = float(airmass) / 10
        with open(fp, 'rb') as fh:
            hdul = fits.open(fh)
            wl = hdul[1].data['wavelength']
            trans = hdul[1].data['transmission']
            if wavelengths_wl_units is None:
                wavelengths_wl_units = np.zeros(len(wl))
                wavelengths_wl_units[:] = wl
                spectra = np.zeros((len(input_filepaths), len(wl)))
                params = np.zeros(len(input_filepaths), dtype=[('airmass', float), ('pwv_mm', float)])
            if not np.all(wl == wavelengths_wl_units):
                print(f"{np.min(wl)=} {np.max(wl)=} {np.unique(np.diff(wl))=}")
                print(f"{np.min(wavelengths_wl_units)=} {np.max(wavelengths_wl_units)=} {np.unique(np.diff(wavelengths_wl_units))=}")
                raise RuntimeError(f"Inconsistent sampling in {fp}")
            spectra[idx] = trans
            params[idx]['airmass'] = airmass
            params[idx]['pwv_mm'] = pwv_mm

    hdul = fits.HDUList([
        fits.PrimaryHDU(),
        fits.BinTableHDU(params, name='PARAMS'),
        fits.ImageHDU(wavelengths_wl_units, name='WAVELENGTHS'),
        fits.ImageHDU(spectra, name='MODEL_SPECTRA'),
    ])
    hdul.writeto(output_filepath, overwrite=True)

# Mauna Kea
_mk_collection = []
for airmass in [1.0, 1.5, 2.0]:
    for pwv_mm in [1.0, 1.6, 3.0, 5.0]:
        fn = _filename_template.format(
            site="mk",
            airmass=int(10 * airmass),
            pwv=int(10 * pwv_mm)
        )
        res = utils.REMOTE_RESOURCES.add_from_url(
            module=__name__,
            url=_base_url + fn,
            converter_function=_convert_gemini_atmosphere,
            output_filename=fn.replace('.dat', '.fits'),
        )
        _mk_collection.append(res)
        name = f"Gemini ATRAN Mauna Kea airmass {airmass} pwv {pwv_mm} mm"
        GEMINI_ATMOSPHERES['Mauna Kea'][fn.replace('.dat', '')] = filter_from_fits(res.output_filepath, name)

GEMINI_ATMOSPHERES_MK_RES = utils.REMOTE_RESOURCES.add(
    __name__,
    utils.CollectionResource(
        _mk_collection,
        _convert_collection_to_model_grid,
        'gemini_atran_mauna_kea_atmospheres.fits'
    )
)
GEMINI_NORTH_ATMOSPHERES = model_grids.ModelAtmosphereGrid(GEMINI_ATMOSPHERES_MK_RES.output_filepath, name="Gemini North")

# Cerro Pachon
_cp_collection = []
for airmass in [1.0, 1.5, 2.0]:
    for pwv_mm in [2.3, 4.3, 7.6, 10.0]:
        fn = _filename_template.format(
            site="cp",
            airmass=int(10 * airmass),
            pwv=int(10 * pwv_mm)
        )
        res = utils.REMOTE_RESOURCES.add_from_url(
            module=__name__,
            url=_base_url + fn,
            converter_function=_convert_gemini_atmosphere,
            output_filename=fn.replace('.dat', '.fits'),
        )
        _cp_collection.append(res)
        name = f"Gemini ATRAN Cerro Pachon airmass {airmass} pwv {pwv_mm} mm"
        GEMINI_ATMOSPHERES['Cerro Pachon'][fn.replace('.dat', '')] = filter_from_fits(res.output_filepath, name)

GEMINI_ATMOSPHERES_CP_RES = utils.REMOTE_RESOURCES.add(
    __name__,
    utils.CollectionResource(_cp_collection, _convert_collection_to_model_grid, 'gemini_atran_cerro_pachon_atmospheres.fits')
)
GEMINI_SOUTH_ATMOSPHERES = model_grids.ModelAtmosphereGrid(GEMINI_ATMOSPHERES_CP_RES.output_filepath, name="Gemini South")
